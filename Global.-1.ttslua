function compileTable(table)
   local index = 1
   local holder = "{"
   while true do
      if type(table[index]) == "function" then
         index = index + 1
      elseif type(table[index]) == "table" then
         holder = holder..compileTable(table[index])
      elseif type(table[index]) == "number" then
         holder = holder..tostring(table[index])
      elseif type(table[index]) == "string" then
         holder = holder.."\""..table[index].."\""
      elseif table[index] == nil then
         holder = holder.."nil"
      elseif type(table[index]) == "boolean" then
         holder = holder..(table[index] and "true" or "false")
      end
      if index + 1 > #table then
        break
      end
      holder = holder..","
      index = index + 1
   end
   return holder.."}"
end

function shuffle(Tbl)  --Shuffle all modular tiles by swapping with eachother. Change
				-- boardPoints table to reflect new changes without breaking the
				--move function.
				-- Added by Mindless

	ObjectTableToShuffle = Tbl

        for i, v in ipairs(ObjectTableToShuffle) do --for everyObjectIn
                r = math.random(#ObjectTableToShuffle)
                local posinitial = v.getPosition()
                local rotinitial = v.getRotation()
                v.setPosition(ObjectTableToShuffle[r].getPosition())
                v.setRotation(ObjectTableToShuffle[r].getRotation())
                ObjectTableToShuffle[r].setPosition(posinitial)
                ObjectTableToShuffle[r].setRotation(rotinitial)

                do --Modify boardPoints to refect chagne

                        local Pos1 = v.getPosition()  --Get Position of First Square
                        local Ind1 = getSquare(Pos1)   --Index of Tile V

                        local Pos2 = ObjectTableToShuffle[r].getPosition()  --Get Position of First Square
                        local Ind2 = getSquare(Pos2)         --get its Index


                        -- local Temp = boardPoints[Ind1]
                        -- boardPoints[Ind1] = boardPoints[Ind2]
                        -- boardPoints[Ind2] = Temp

			 local Temp = boardPoints[Ind1][2]   --Swaps ONLY Names
			 boardPoints[Ind1][2] = boardPoints[Ind2][2]
			 boardPoints[Ind2][2] = Temp

			 local Temp = boardPoints[Ind1][3]   --Swaps ONLY GUIDs
			 boardPoints[Ind1][3] = boardPoints[Ind2][3]
			 boardPoints[Ind2][3] = Temp


                end
        end
end






function onload()
        heightOffset = 1
        Table4={
                {position={0.87, heightOffset, -0.87}, rotation={0, -180, 180}},
                {position={0.87, heightOffset, 0.87}, rotation={0, 0, 180}},
                {position={-0.87, heightOffset, -0.87}, rotation={0, -180, 0}},
        }

        Table1 = {
                {position={0.64, heightOffset, -0.87}, rotation={0, -180, 0}},
                {position={0.48, heightOffset, -0.87}, rotation={0, -180, 0.01}},
                {position={0.32, heightOffset, -0.87}, rotation={0, -180, 0}},
                {position={0.16, heightOffset, -0.87}, rotation={0, -180, 0}},
                {position={0, heightOffset, -0.87}, rotation={0, -180, 180.01}},
                {position={-0.16, heightOffset, -0.87}, rotation={0, -180, 0}},
                {position={-0.32, heightOffset, -0.87}, rotation={0, -180, 180}},
                {position={-0.48, heightOffset, -0.87}, rotation={0, -180, 0.01}},
                {position={-0.64, heightOffset, -0.87}, rotation={0, -180, 0.01}},

                {position={0.87, heightOffset, -0.32}, rotation={0, 90, 180}},
                {position={0.87, heightOffset, -0.16}, rotation={0, 90, 180}},
                {position={0.87, heightOffset, -0.48}, rotation={0, 90, 180}},
                {position={0.87, heightOffset, -0.64}, rotation={0, 90, 180}},
                {position={0.87, heightOffset, 0.16}, rotation={0, 90, 0}},
                {position={0.87, heightOffset, 0}, rotation={0, 90, 180}},
                {position={0.87, heightOffset, 0.32}, rotation={0, 90, 0.01}},
                {position={0.87, heightOffset, 0.64}, rotation={0, 90, 0}},
                {position={0.87, heightOffset, 0.48}, rotation={0, 90, 180}},

                {position={-0.87, heightOffset, 0}, rotation={0, -90, 180}},
                {position={-0.87, heightOffset, -0.16}, rotation={0, -90, 0}},
                {position={-0.87, heightOffset, -0.48}, rotation={0, -90, 0}},
                {position={-0.87, heightOffset, -0.32}, rotation={0, -90, 180}},
                {position={-0.87, heightOffset, -0.64}, rotation={0, -90, 180}},
                {position={-0.87, heightOffset, 0.64}, rotation={0, -90, 180}},
                {position={-0.87, heightOffset, 0.48}, rotation={0, -90, 0}},
                {position={-0.87, heightOffset, 0.32}, rotation={0, -90, 0}},
                {position={-0.87, heightOffset, 0.16}, rotation={0, -90, 0}},

                {position={0.64, heightOffset, 0.87}, rotation={0, -0.03, 180}},
                {position={0.48, heightOffset, 0.87}, rotation={0, -0.03, 180}},
                {position={0.32, heightOffset, 0.87}, rotation={0, 0, 180}},
                {position={0.16, heightOffset, 0.87}, rotation={0, 0, 180}},
                {position={0, heightOffset, 0.87}, rotation={0, -0.03, 180}},
                {position={-0.16, heightOffset, 0.87}, rotation={0, 0, 180}},
                {position={-0.32, heightOffset, 0.87}, rotation={0, 0, 180}},
                {position={-0.48, heightOffset, 0.87}, rotation={0, 0, 0}},
                {position={-0.64, heightOffset, 0.87}, rotation={0, 0, 0}},
        }


        Table2 = {  --table of GUIDs of the thin tiles
                "d86d9e",
                "0be989",
                "5054d3",
                "830d72",
                "f168cb",
                "44470d",
                "28bf46",
                "d0ec7f",
                "5a9b1b",
                "954e29",
                "4ec6d8",
                "1035d2",
                "08d1f6",
                "d561ca",
                "eca9e1",
                "b50b41",
                "372199",
                "383b15",
                "8304f4",
                "301c14",
                "cbf6e0",
                "74f444",
                "54a8bc",
                "e8eb08",
                "1a0ed2",
                "f09569",
                "f4dc4f",
                "774fb1",
                "34c38f",
                "71515f",
                "41917f",
                "3aaefe",
                "31ef48",
                "599ed2",
                "1e482e",
                "7a9e04",
        }

        ObjectTable2 = {}  --Table of all the thin tiles

        for B,R in ipairs(Table2) do
                ObjectTable2[B] = getObjectFromGUID(R)
        end

        Table3 = {  --Table of GUIDs of square tiles (except the starting one)
                "d98755",
                "fd4e1e",
                "568d86",
        }

	ObjectTable3 = {}
	for B,R in ipairs(Table3) do
                ObjectTable3[B] = getObjectFromGUID(R)
        end

        StartTileGUID = "ebc8ff"

        addHotkey("3", hotkey3, false)
	addHotkey("4", hotkey4, false)

        initializePlayerData()
        initializeBoardPoints()
        nextTurn({"Black"})
        Wait.time(function()
        for i = 1, 8 do
          if playerData[i].SortBusy > 0 then
              if zoneStill(i) then
                  playerData[i].SortBusy = playerData[i].SortBusy - 1
              end
          end
        end
        end, 0.1, -1)
end

function zoneStill(i)
    for j, v in ipairs(playerData[i].WalletZone.getObjects()) do
        if (v.tag == "Card" or v.tag == "Deck") and (v.spawning or not v.resting) then
            return false
        end
    end
    return true
end

function update()
  updateWallets()
  retrieveDice()
end

function hotkey3()
	shuffle(ObjectTable2)
end

function hotkey4()
	shuffle(ObjectTable3)
end

local bagJSON = '{\n  "Name": "Bag",\n  "Transform": {\n    "posX": 0.239887953,\n    "posY": 0.774966359,\n    "posZ": -0.554694235,\n    "rotX": 1.41859493E-06,\n    "rotY": 346.89502,\n    "rotZ": -2.124479E-05,\n    "scaleX": 0.01,\n    "scaleY": 0.01,\n    "scaleZ": 0.01\n  },\n  "Nickname": "",\n  "Description": "",\n  "ColorDiffuse": {\n    "r": 0.7058823,\n    "g": 0.366520882,\n    "b": 0.0\n  },\n  "Locked": true,\n  "Grid": true,\n  "Snap": true,\n  "Autoraise": true,\n  "Sticky": true,\n  "Tooltip": true,\n  "GridProjection": false,\n  "HideWhenFaceDown": false,\n  "Hands": false,\n  "MaterialIndex": -1,\n  "MeshIndex": -1,\n  "XmlUI": "",\n  "ContainedObjects": [],\n  "GUID": "6a6e9b"\n}'

local cardJSONs = {
    [1] = [=[{
      "Name": "Card",
      "Transform": {
        "posX": 0,
        "posY": -5,
        "posZ": 0,
        "rotX": 2.79154968,
        "rotY": 179.935516,
        "rotZ": 359.876465,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "1",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": true,
      "CardID": 200,
      "SidewaysCard": true,
      "CustomDeck": {
        "2": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "NumWidth": 4,
          "NumHeight": 2,
          "BackIsHidden": false,
          "UniqueBack": true
        }
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "PhysicsMaterial": {
        "StaticFriction": 0.2,
        "DynamicFriction": 0.2,
        "Bounciness": 0.0,
        "FrictionCombine": 0,
        "BounceCombine": 0
      },
      "Rigidbody": {
        "Mass": 0.5,
        "Drag": 0.1,
        "AngularDrag": 0.1,
        "UseGravity": true
      },
      "GUID": "5b36a5"
  }]=],
    [5] = [=[{
      "Name": "Card",
      "Transform": {
        "posX": 0,
        "posY": -5,
        "posZ": 0,
        "rotX": 2.8666327,
        "rotY": 180.013824,
        "rotZ": 359.87616,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "5",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": true,
      "CardID": 201,
      "SidewaysCard": true,
      "CustomDeck": {
        "2": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "NumWidth": 4,
          "NumHeight": 2,
          "BackIsHidden": false,
          "UniqueBack": true
        }
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "PhysicsMaterial": {
        "StaticFriction": 0.2,
        "DynamicFriction": 0.2,
        "Bounciness": 0.0,
        "FrictionCombine": 0,
        "BounceCombine": 0
      },
      "Rigidbody": {
        "Mass": 0.5,
        "Drag": 0.1,
        "AngularDrag": 0.1,
        "UseGravity": true
      },
      "GUID": "b917a7"
  }]=],
    [10] = [=[{
      "Name": "Card",
      "Transform": {
        "posX": 0,
        "posY": -5,
        "posZ": 0,
        "rotX": 2.867191,
        "rotY": 180.013626,
        "rotZ": 359.8766,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "10",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": true,
      "CardID": 202,
      "SidewaysCard": true,
      "CustomDeck": {
        "2": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "NumWidth": 4,
          "NumHeight": 2,
          "BackIsHidden": false,
          "UniqueBack": true
        }
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "PhysicsMaterial": {
        "StaticFriction": 0.2,
        "DynamicFriction": 0.2,
        "Bounciness": 0.0,
        "FrictionCombine": 0,
        "BounceCombine": 0
      },
      "Rigidbody": {
        "Mass": 0.5,
        "Drag": 0.1,
        "AngularDrag": 0.1,
        "UseGravity": true
      },
      "GUID": "02bdc0"
  }]=],
    [20] = [=[{
      "Name": "Card",
      "Transform": {
        "posX": 0,
        "posY": -5,
        "posZ": 0,
        "rotX": 2.96412778,
        "rotY": 180.014664,
        "rotZ": 359.876678,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "20",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": true,
      "CardID": 203,
      "SidewaysCard": true,
      "CustomDeck": {
        "2": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "NumWidth": 4,
          "NumHeight": 2,
          "BackIsHidden": false,
          "UniqueBack": true
        }
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "PhysicsMaterial": {
        "StaticFriction": 0.2,
        "DynamicFriction": 0.2,
        "Bounciness": 0.0,
        "FrictionCombine": 0,
        "BounceCombine": 0
      },
      "Rigidbody": {
        "Mass": 0.5,
        "Drag": 0.1,
        "AngularDrag": 0.1,
        "UseGravity": true
      },
      "GUID": "840624"
  }]=],
    [50] = [=[{
      "Name": "Card",
      "Transform": {
        "posX": 0,
        "posY": -5,
        "posZ": 0,
        "rotX": 3.11859584,
        "rotY": 180.014648,
        "rotZ": 359.876678,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "50",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": true,
      "CardID": 204,
      "SidewaysCard": true,
      "CustomDeck": {
        "2": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "NumWidth": 4,
          "NumHeight": 2,
          "BackIsHidden": false,
          "UniqueBack": true
        }
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "PhysicsMaterial": {
        "StaticFriction": 0.2,
        "DynamicFriction": 0.2,
        "Bounciness": 0.0,
        "FrictionCombine": 0,
        "BounceCombine": 0
      },
      "Rigidbody": {
        "Mass": 0.5,
        "Drag": 0.1,
        "AngularDrag": 0.1,
        "UseGravity": true
      },
      "GUID": "533560"
  }]=],
    [100] = [=[{
      "Name": "Card",
      "Transform": {
        "posX": 0,
        "posY": -5,
        "posZ": 0,
        "rotX": 3.11713481,
        "rotY": 180.013611,
        "rotZ": 359.877,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "100",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": true,
      "CardID": 205,
      "SidewaysCard": true,
      "CustomDeck": {
        "2": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "NumWidth": 4,
          "NumHeight": 2,
          "BackIsHidden": false,
          "UniqueBack": true
        }
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "PhysicsMaterial": {
        "StaticFriction": 0.2,
        "DynamicFriction": 0.2,
        "Bounciness": 0.0,
        "FrictionCombine": 0,
        "BounceCombine": 0
      },
      "Rigidbody": {
        "Mass": 0.5,
        "Drag": 0.1,
        "AngularDrag": 0.1,
        "UseGravity": true
      },
      "GUID": "b6a66b"
  }]=],
    [500] = [=[{
      "Name": "Card",
      "Transform": {
        "posX": 0,
        "posY": -5,
        "posZ": 0,
        "rotX": 3.11777544,
        "rotY": 180.002518,
        "rotZ": 359.876923,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "500",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": true,
      "CardID": 206,
      "SidewaysCard": true,
      "CustomDeck": {
        "2": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/93848290826538623/9EF4F0AF142FC009C158188C3E545C3FC69068B5/",
          "NumWidth": 4,
          "NumHeight": 2,
          "BackIsHidden": false,
          "UniqueBack": true
        }
      },
      "XmlUI": "",
      "LuaScript": "",
      "LuaScriptState": "",
      "PhysicsMaterial": {
        "StaticFriction": 0.2,
        "DynamicFriction": 0.2,
        "Bounciness": 0.0,
        "FrictionCombine": 0,
        "BounceCombine": 0
      },
      "Rigidbody": {
        "Mass": 0.5,
        "Drag": 0.1,
        "AngularDrag": 0.1,
        "UseGravity": true
      },
      "GUID": "d57fc8"
  }]=],
}

local chipValues = {1, 5, 10, 20, 50, 100, 500}
local getChangeCounts = {5, 5, 5, 6, 2, 2, 2}

local colorToNum = {
    ["white"] = 1,
    ["pink"] = 2,
    ["purple"] = 3,
    ["blue"] = 4,
    ["green"] = 5,
    ["yellow"] = 6,
    ["orange"] = 7,
    ["red"] = 8,
}

local whiteSortPositions = {
    ["1"] = {10.00, 0.5, -43.00},
    ["5"] = {12.00, 0.5, -43.00},
    ["10"] = {14.00, 0.5, -43.00},
    ["20"] = {16.00, 0.5, -43.00},
    ["50"] = {18.00, 0.5, -43.00},
    ["100"] = {20.00, 0.5, -43.00},
    ["500"] = {22.00, 0.5, -43.00},

    ["Mediterranean Avenue"] = {25.00, 0.5, -40.00},
    ["Baltic Avenue"] = {25.00, 0.5, -43.00},

    ["Oriental Avenue"] = {28.00, 0.5, -40.00},
    ["Vermont Avenue"] = {28.00, 0.5, -43.00},
    ["Connecticut Avenue"] = {28.00, 0.5, -46.00},

    ["St. Charles Place"] = {31.00, 0.5, -40.00},
    ["States Avenue"] = {31.00, 0.5, -42.99},
    ["Virginia Avenue"] = {31.00, 0.5, -46.00},

    ["St. James Place"] = {34.00, 0.5, -40.00},
    ["Tennessee Avenue"] = {34.00, 0.5, -43.00},
    ["New York Avenue"] = {34.01, 0.5, -46.00},

    ["Kentucky Avenue"] = {37.00, 0.5, -40.00},
    ["Indiana Avenue"] = {37.00, 0.5, -43.00},
    ["Illinois Avenue"] = {37.01, 0.5, -46.00},

    ["Atlantic Avenue"] = {40.00, 0.5, -40.00},
    ["Ventnor Avenue"] = {40.00, 0.5, -43.00},
    ["Marvin Gardens"] = {40.01, 0.5, -46.00},

    ["Pacific Avenue"] = {43.00, 0.5, -40.00},
    ["North Carolina Avenue"] = {42.99, 0.5, -43.00},
    ["Pennsylvania Avenue"] = {43.00, 0.5, -46.00},


    ["Park Place"] = {46.00, 0.5, -40.00},
    ["Boardwalk"] = {46.00, 0.5, -42.99},


    ["B&O Railroad"] = {49.00, 0.5, -40.01},
    ["Short Line"] = {49.00, 1, -42.00},
    ["Reading Railroad"] = {49.00, 1.5, -44.02},
    ["Pennsylvania Railroad"] = {49.00, 2, -46.00},

    ["Electric Company"] = {52.00, 0.5, -40.00},
    ["Water Works"] = {52.00, 0.5, -43.00},

    ["Miscellaneous"] = {16.00, 0.5, -40.00},
}

local propertyPrices = {
    ["Mediterranean Avenue"] = 60,
    ["Baltic Avenue"] = 60,

    ["Oriental Avenue"] = 100,
    ["Vermont Avenue"] = 100,
    ["Connecticut Avenue"] = 120,

    ["St. Charles Place"] = 140,
    ["States Avenue"] = 140,
    ["Virginia Avenue"] = 160,

    ["St. James Place"] = 180,
    ["Tennessee Avenue"] = 180,
    ["New York Avenue"] = 200,

    ["Kentucky Avenue"] = 220,
    ["Indiana Avenue"] = 220,
    ["Illinois Avenue"] = 240,

    ["Atlantic Avenue"] = 260,
    ["Ventnor Avenue"] = 260,
    ["Marvin Gardens"] = 280,

    ["Pacific Avenue"] = 300,
    ["North Carolina Avenue"] = 300,
    ["Pennsylvania Avenue"] = 320,


    ["Park Place"] = 350,
    ["Boardwalk"] = 400,


    ["B&O Railroad"] = 200,
    ["Short Line"] = 200,
    ["Reading Railroad"] = 200,
    ["Pennsylvania Railroad"] = 200,
    ["Electric Company"] = 150,
    ["Water Works"] = 150,
}

playerData = {nil}
function initializePlayerData()
  playerData[1] = {
    Color="White"
    ,Token=nil
    ,ClaimTokenZone=getObjectFromGUID('761a31')
    ,ButtonChip=getObjectFromGUID('d3075d')
    ,TokenInitialPosition={15,2.2,-16}
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('539e70')
    ,WalletCounter=getObjectFromGUID('a0b05d')
    ,Die1=getObjectFromGUID('e6440b')
    ,Die2=getObjectFromGUID('30c53f')
    ,Die1Position=getObjectFromGUID('e6440b').getPosition()
    ,Die2Position=getObjectFromGUID('30c53f').getPosition()
    ,Die1Resting=true
    ,Die2Resting=true
    ,SortPositions = {}
    ,SortBusy = 0
  }
  playerData[2] = {
    Color="Pink"
    ,Token=nil
    ,ClaimTokenZone=getObjectFromGUID('ce306f')
    ,ButtonChip=getObjectFromGUID('ba0e66')
    ,TokenInitialPosition={16,2.2,-15}
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('1c29e4')
    ,WalletCounter=getObjectFromGUID('16aa98')
    ,Die1=getObjectFromGUID('6e0d6f')
    ,Die2=getObjectFromGUID('054ea3')
    ,Die1Position=getObjectFromGUID('6e0d6f').getPosition()
    ,Die2Position=getObjectFromGUID('054ea3').getPosition()
    ,Die1Resting=true
    ,Die2Resting=true
    ,SortPositions = {}
    ,SortBusy = 0
  }
  playerData[3] = {
    Color="Purple"
    ,Token=nil
    ,ClaimTokenZone=getObjectFromGUID('9335dd')
    ,ButtonChip=getObjectFromGUID('0dc584')
    ,TokenInitialPosition={15,2.2,-14}
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('48fdea')
    ,WalletCounter=getObjectFromGUID('de5fd3')
    ,Die1=getObjectFromGUID('3a57b0')
    ,Die2=getObjectFromGUID('37aebc')
    ,Die1Position=getObjectFromGUID('3a57b0').getPosition()
    ,Die2Position=getObjectFromGUID('37aebc').getPosition()
    ,Die1Resting=true
    ,Die2Resting=true
    ,SortPositions = {}
    ,SortBusy = 0
  }
  playerData[4] = {
    Color="Blue"
    ,Token=nil
    ,ClaimTokenZone=getObjectFromGUID('f6d27a')
    ,ButtonChip=getObjectFromGUID('df6646')
    ,TokenInitialPosition={16,2.2,-13}
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('fbbdc0')
    ,WalletCounter=getObjectFromGUID('44e6b2')
    ,Die1=getObjectFromGUID('376617')
    ,Die2=getObjectFromGUID('ad79c0')
    ,Die1Position=getObjectFromGUID('376617').getPosition()
    ,Die2Position=getObjectFromGUID('ad79c0').getPosition()
    ,Die1Resting=true
    ,Die2Resting=true
    ,SortPositions = {}
    ,SortBusy = 0
  }
  playerData[5] = {
    Color="Green"
    ,Token=nil
    ,ClaimTokenZone=getObjectFromGUID('aeb024')
    ,ButtonChip=getObjectFromGUID('620fe1')
    ,TokenInitialPosition={14,2.2,-13}
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('a6c341')
    ,WalletCounter=getObjectFromGUID('a34c1a')
    ,Die1=getObjectFromGUID('cb9b65')
    ,Die2=getObjectFromGUID('1879c7')
    ,Die1Position=getObjectFromGUID('cb9b65').getPosition()
    ,Die2Position=getObjectFromGUID('1879c7').getPosition()
    ,Die1Resting=true
    ,Die2Resting=true
    ,SortPositions = {}
    ,SortBusy = 0
  }
  playerData[6] = {
    Color="Yellow"
    ,Token=nil
    ,ClaimTokenZone=getObjectFromGUID('9210ac')
    ,ButtonChip=getObjectFromGUID('aaa099')
    ,TokenInitialPosition={13,2.2,-14}
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('fb0a0e')
    ,WalletCounter=getObjectFromGUID('520c81')
    ,Die1=getObjectFromGUID('c87ec1')
    ,Die2=getObjectFromGUID('12b90d')
    ,Die1Position=getObjectFromGUID('c87ec1').getPosition()
    ,Die2Position=getObjectFromGUID('12b90d').getPosition()
    ,Die1Resting=true
    ,Die2Resting=true
    ,SortPositions = {}
    ,SortBusy = 0
  }
  playerData[7] = {
    Color="Orange"
    ,Token=nil
    ,ClaimTokenZone=getObjectFromGUID('b47a92')
    ,ButtonChip=getObjectFromGUID('bbdee4')
    ,TokenInitialPosition={14,2.2,-15}
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('c81e71')
    ,WalletCounter=getObjectFromGUID('31d15f')
    ,Die1=getObjectFromGUID('b05623')
    ,Die2=getObjectFromGUID('ce3ddc')
    ,Die1Position=getObjectFromGUID('b05623').getPosition()
    ,Die2Position=getObjectFromGUID('ce3ddc').getPosition()
    ,Die1Resting=true
    ,Die2Resting=true
    ,SortPositions = {}
    ,SortBusy = 0
  }
  playerData[8] = {
    Color="Red"
    ,Token=nil
    ,ClaimTokenZone=getObjectFromGUID('8ee3ba')
    ,ButtonChip=getObjectFromGUID('4331c6')
    ,TokenInitialPosition={13,2.2,-16}
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('1ca32e')
    ,WalletCounter=getObjectFromGUID('21722e')
    ,Die1=getObjectFromGUID('a9ed8a')
    ,Die2=getObjectFromGUID('0a55f5')
    ,Die1Position=getObjectFromGUID('a9ed8a').getPosition()
    ,Die2Position=getObjectFromGUID('0a55f5').getPosition()
    ,Die1Resting=true
    ,Die2Resting=true
    ,SortPositions = {}
    ,SortBusy = 0
  }
  playerData[9] = {
    Color="Black"
    ,Token=nil
    ,ClaimTokenZone=nil
    ,ButtonChip=nil
    ,WalletZoneObjectCount = 0
    ,WalletZone=getObjectFromGUID('0bba1e')
    ,WalletCounter=getObjectFromGUID('543fce')
    ,Die1=nil
    ,Die2=nil
    ,Die1Position={0,0,0}
    ,Die2Position={0,0,0}
    ,Die1Resting=true
    ,Die2Resting=true
  }

    playerData[1].WalletCounter.setInvisibleTo({"Grey", "Red", "Orange", "Yellow", "Green", "Blue", "Purple", "Pink"})
    playerData[2].WalletCounter.setInvisibleTo({"Grey", "White", "Red", "Orange", "Yellow", "Green", "Blue", "Purple"})
    playerData[3].WalletCounter.setInvisibleTo({"Grey", "White", "Red", "Orange", "Yellow", "Green", "Blue", "Pink"})
    playerData[4].WalletCounter.setInvisibleTo({"Grey", "White", "Red", "Orange", "Yellow", "Green", "Purple", "Pink"})
    playerData[5].WalletCounter.setInvisibleTo({"Grey", "White", "Red", "Orange", "Yellow", "Blue", "Purple", "Pink"})
    playerData[6].WalletCounter.setInvisibleTo({"Grey", "White", "Red", "Orange", "Green", "Blue", "Purple", "Pink"})
    playerData[7].WalletCounter.setInvisibleTo({"Grey", "White", "Red", "Yellow", "Green", "Blue", "Purple", "Pink"})
    playerData[8].WalletCounter.setInvisibleTo({"Grey", "White", "Orange", "Yellow", "Green", "Blue", "Purple", "Pink"})

  for i = 1, 7, 2 do
      for j, v in pairs(whiteSortPositions) do
          playerData[i].SortPositions[j] = playerData[i].WalletCounter.positionToWorld(playerData[1].WalletCounter.positionToLocal(v))
      end
  end
  for i = 2, 8, 2 do
      for j, v in pairs(whiteSortPositions) do
          local localPosition = playerData[1].WalletCounter.positionToLocal(v)
          playerData[i].SortPositions[j] = playerData[i].WalletCounter.positionToWorld({
            -localPosition.x,
            localPosition.y,
            localPosition.z,
          })
      end
  end

  local setToken_parameters = {
      click_function='setToken', function_owner=nil, label='Claim Token',
      position={-2.5,0.2,0}, rotation={0,180,180}, width=1500, height=500, font_size=200
  }
  playerData[1].ButtonChip.createButton(setToken_parameters)
  playerData[2].ButtonChip.createButton(setToken_parameters)
  playerData[3].ButtonChip.createButton(setToken_parameters)
  playerData[4].ButtonChip.createButton(setToken_parameters)
  playerData[5].ButtonChip.createButton(setToken_parameters)
  playerData[6].ButtonChip.createButton(setToken_parameters)
  playerData[7].ButtonChip.createButton(setToken_parameters)
  playerData[8].ButtonChip.createButton(setToken_parameters)

  local moveTokenLeft_parameters = {
      click_function='moveToken', function_owner=nil, label='Move',
      position={7.5,0.2,2}, rotation={0,180,180}, width=1000, height=900, font_size=350
  }
  playerData[1].ButtonChip.createButton(moveTokenLeft_parameters)
  playerData[3].ButtonChip.createButton(moveTokenLeft_parameters)
  playerData[5].ButtonChip.createButton(moveTokenLeft_parameters)
  playerData[7].ButtonChip.createButton(moveTokenLeft_parameters)
  local moveTokenRight_parameters = {
      click_function='moveToken', function_owner=nil, label='Move',
      position={-10.5,0.2,2}, rotation={0,180,180}, width=1000, height=900, font_size=350
  }
  playerData[2].ButtonChip.createButton(moveTokenRight_parameters)
  playerData[4].ButtonChip.createButton(moveTokenRight_parameters)
  playerData[6].ButtonChip.createButton(moveTokenRight_parameters)
  playerData[8].ButtonChip.createButton(moveTokenRight_parameters)


  local rollDiceLeft_parameters = {
      click_function='rollDice', function_owner=nil, label='Roll',
      position={4.3,0.2,2}, rotation={0,180,180}, width=1000, height=900, font_size=350
  }
  playerData[1].ButtonChip.createButton(rollDiceLeft_parameters)
  playerData[3].ButtonChip.createButton(rollDiceLeft_parameters)
  playerData[5].ButtonChip.createButton(rollDiceLeft_parameters)
  playerData[7].ButtonChip.createButton(rollDiceLeft_parameters)
  local rollDiceRight_parameters = {
      click_function='rollDice', function_owner=nil, label='Roll',
      position={-7.5,0.2,2}, rotation={0,180,180}, width=1000, height=900, font_size=350
  }
  playerData[2].ButtonChip.createButton(rollDiceRight_parameters)
  playerData[4].ButtonChip.createButton(rollDiceRight_parameters)
  playerData[6].ButtonChip.createButton(rollDiceRight_parameters)
  playerData[8].ButtonChip.createButton(rollDiceRight_parameters)







  local sortLeft_parameters = {
      click_function='sortWallet', function_owner=nil, label='Sort',
      position={10.5,0.2,2}, rotation={0,180,180}, width=1000, height=900, font_size=350
  }
  playerData[1].ButtonChip.createButton(sortLeft_parameters)
  playerData[3].ButtonChip.createButton(sortLeft_parameters)
  playerData[5].ButtonChip.createButton(sortLeft_parameters)
  playerData[7].ButtonChip.createButton(sortLeft_parameters)
  local sortRight_parameters = {
      click_function='sortWallet', function_owner=nil, label='Sort',
      position={-13.5,0.2,2}, rotation={0,180,180}, width=1000, height=900, font_size=350
  }
  playerData[2].ButtonChip.createButton(sortRight_parameters)
  playerData[4].ButtonChip.createButton(sortRight_parameters)
  playerData[6].ButtonChip.createButton(sortRight_parameters)
  playerData[8].ButtonChip.createButton(sortRight_parameters)

  local convertLeft_parameters = {
      click_function='convertWallet', function_owner=nil, label='Convert',
      position={14,0.2,2}, rotation={0,180,180}, width=1300, height=900, font_size=350
  }
  playerData[1].ButtonChip.createButton(convertLeft_parameters)
  playerData[3].ButtonChip.createButton(convertLeft_parameters)
  playerData[5].ButtonChip.createButton(convertLeft_parameters)
  playerData[7].ButtonChip.createButton(convertLeft_parameters)
  local convertRight_parameters = {
      click_function='convertWallet', function_owner=nil, label='Convert',
      position={-17,0.2,2}, rotation={0,180,180}, width=1300, height=900, font_size=350
  }
  playerData[2].ButtonChip.createButton(convertRight_parameters)
  playerData[4].ButtonChip.createButton(convertRight_parameters)
  playerData[6].ButtonChip.createButton(convertRight_parameters)
  playerData[8].ButtonChip.createButton(convertRight_parameters)

    local buyLeft_parameters = {
        click_function='buy', function_owner=nil, label='Buy',
        position={17,0.2,2}, rotation={0,180,180}, width=900, height=900, font_size=350
    }
    playerData[1].ButtonChip.createButton(buyLeft_parameters)
    playerData[3].ButtonChip.createButton(buyLeft_parameters)
    playerData[5].ButtonChip.createButton(buyLeft_parameters)
    playerData[7].ButtonChip.createButton(buyLeft_parameters)
    local buyRight_parameters = {
        click_function='buy', function_owner=nil, label='Buy',
        position={-20,0.2,2}, rotation={0,180,180}, width=900, height=900, font_size=350
    }
    playerData[2].ButtonChip.createButton(buyRight_parameters)
    playerData[4].ButtonChip.createButton(buyRight_parameters)
    playerData[6].ButtonChip.createButton(buyRight_parameters)
    playerData[8].ButtonChip.createButton(buyRight_parameters)
end

-- Claiming Player's Tokens ---------------------------------------------
function setToken(theButton, theClicker)
  local playerNum = getPlayerNum(theButton)
  if playerNum == 0 then
    print('ERROR: Claim: How did you click this?')
    return
  end

  if playerData[playerNum].Color != theClicker and theClicker != "Black" then
    broadcastToColor("This is not yours", theClicker, {1,1,1})
    return
  end

  local newToken = nil

  local objectsList = playerData[playerNum].ClaimTokenZone.getObjects()
  if #objectsList < 2 then
    broadcastToColor("No Token in Zone", theClicker, {1,1,1})
    return
  else
    if #objectsList > 2 then
      broadcastToColor("Too many objects in Zone", theClicker, {1,1,1})
      return
    else
      local hasFoundButton = false
      for k, v in next, objectsList do
          if v == theButton then
            hasFoundButton = true
          else
            newToken = getObjectFromGUID(v.getGUID())
          end
      end
      if hasFoundButton == false then
        broadcastToColor("Put the pedestal back", theClicker, {1,1,1})
        return
      end
    end
  end

  if newToken.getQuantity() != -1 then
    broadcastToColor("Please do not use a Bag or Deck", theClicker, {1,1,1})
    return
  end

  if newToken.getStatesCount() != -1 then
    print(newToken.getStatesCount())
    broadcastToColor("Please remove States from this Object first", theClicker, {1,1,1})
    return
  end

  local cloneToken = newToken.clone()
  if playerData[playerNum].Token == nil then
    cloneToken.setPosition(playerData[playerNum].TokenInitialPosition)
    cloneToken.setRotation({0,0,0})
  else
    cloneToken.setPosition(playerData[playerNum].Token.getPosition())
    cloneToken.setRotation(playerData[playerNum].Token.getRotation())
    playerData[playerNum].Token.destruct()
  end

  cloneToken.drag = 0.1
  cloneToken.angular_drag = 0.1
  cloneToken.static_friction = 1
  cloneToken.dynamic_friction = 1
  cloneToken.bounciness = 0
  cloneToken.mass = 100
  cloneToken.unlock()

  playerData[playerNum].Token = cloneToken
  newToken.lock()
end

function convertWallet(theButton, theClicker)
  local playerNum = getPlayerNum(theButton)
  if playerNum == 0 then
    print('ERROR: Claim: How did you click this?')
    return
  end

  if playerData[playerNum].Color != theClicker and theClicker != "Black" and not Player[theClicker].admin then
    broadcastToColor("This is not yours", theClicker, {1,1,1})
    return
  end

  if playerData[playerNum].SortBusy > 0 or not zoneStill(playerNum) then
      broadcastToColor("Please wait before trying again so soon.", theClicker, {1,1,1})
      return
  end


  for i, v in ipairs(playerData[playerNum].WalletZone.getObjects()) do
      if v.tag == "Card" or v.tag == "Deck" then
          if not v.resting or v.spawning then
              broadcastToColor("Make sure nothing in your wallet zone is moving.", theClicker, {1,1,1})
              return
          end
      end
  end


  playerData[playerNum].SortBusy = 5

  local objectsList = playerData[playerNum].WalletZone.getObjects()
  local moneySum = 0

  local waitFrames = 1
  for k, v in ipairs(objectsList) do
        if (tonumber(v.getDescription()) == nil) then
            if (v.getQuantity() != -1) then
                local deckContents = v.getObjects()
                if deckContents != nil then
                    for ke = #deckContents, 1, -1 do
                        if (tonumber(deckContents[ke].description) != nil) then
                            moneySum = moneySum + tonumber(deckContents[ke].description)
                            Wait.frames(function()
                                v.takeObject({
                                    position          = {0, -5, 0},
                                    rotation          = {0, 0, 0},
                                    callback_function = function(obj) obj.destruct() end,
                                    smooth            = false,
                                    index             = deckContents[ke].index,
                                })
                            end, waitFrames)
                        end
                    end
                    waitFrames = waitFrames + 1
                    playerData[playerNum].SortBusy = playerData[playerNum].SortBusy + 0.2
                end
            end
        else
            moneySum = moneySum + tonumber(v.getDescription())
            Wait.frames(function()
                v.destruct()
            end, waitFrames)
            waitFrames = waitFrames + 1
            playerData[playerNum].SortBusy = playerData[playerNum].SortBusy + 0.2
        end
    end
    Wait.frames(function()
        dispenseChange(moneySum, playerNum)
    end, waitFrames)
end


function onChat(message, player)
    if string.sub(message, 1, 4) == "!pay" then
        splitMessage = splitString(message)
        if #splitMessage < 3 then
            player.broadcast("Error: incomplete command.")
            return
        end
        local payerNum = colorToNum[string.lower(player.color)]
        if not payerNum then
            player.broadcast("Error: you are not seated.")
            return
        end
        local payeeNum = colorToNum[string.lower(splitMessage[2])]
        if not payeeNum then
            if string.lower(splitMessage[2]) == "bank" then
                payeeNum = 0
            end
        end
        if not payeeNum then
            player.broadcast("Error: cannot read player color")
            return
        end
        if payerNum == payeeNum then
            player.broadcast("Error: cannot pay yourself")
            return
        end
        local amount = math.floor(tonumber(splitMessage[3]) + 0.5)
        if not amount or amount < 1 then
            player.broadcast("Error: cannot read amount to pay")
            return
        end

        if (playerData[payerNum].SortBusy > 0 or not zoneStill(payerNum)) or (payeeNum ~= 0 and (playerData[payeeNum].SortBusy > 0 or not zoneStill(payeeNum))) then
            broadcastToColor("Make sure nothing in both players' wallet zones is moving.", playerData[payerNum].Color, {1,1,1})
            return
        end
        pay(payerNum, payeeNum, amount)
    end
end


function countWallet(playerNum)
    local objectsList = playerData[playerNum].WalletZone.getObjects()
    local moneySum = 0

    for k, v in ipairs(objectsList) do
        if (tonumber(v.getDescription()) == nil) then
            if (v.getQuantity() != -1) then
                local deckContents = v.getObjects()
                if deckContents != nil then
                    for ke = #deckContents, 1, -1 do
                        if (tonumber(deckContents[ke].description) != nil) then
                            moneySum = moneySum + tonumber(deckContents[ke].description)
                        end
                    end
                end
            end
        else
            moneySum = moneySum + tonumber(v.getDescription())
        end
    end
    return moneySum
end


function pay(payerNum, payeeNum, amount)

    if payeeNum == 0 then
        payBank(payerNum, amount)
        return
    end

    playerData[payerNum].SortBusy = 5
    playerData[payeeNum].SortBusy = 5

    local payerBefore = 0
    local payeeBefore = 0

    payerBefore = countWallet(payerNum)

    if amount > payerBefore then
        broadcastToColor("You can't afford to pay that much.", playerData[payerNum].Color, {1,1,1})
        return
    end

    objectsList = playerData[payeeNum].WalletZone.getObjects()
    local moneySum = 0

    local waitFrames = 1
    for k, v in ipairs(objectsList) do
        if (tonumber(v.getDescription()) == nil) then
            if (v.getQuantity() != -1) then
                local deckContents = v.getObjects()
                if deckContents != nil then
                    for ke = #deckContents, 1, -1 do
                        if (tonumber(deckContents[ke].description) != nil) then
                            moneySum = moneySum + tonumber(deckContents[ke].description)
                            Wait.frames(function()
                                ---[[
                                v.takeObject({
                                    position          = {0, -5, 0},
                                    rotation          = {0, 0, 0},
                                    callback_function = function(obj) obj.destruct() end,
                                    smooth            = false,
                                    index             = deckContents[ke].index,
                                })
                                --]]
                            end, waitFrames)
                        end
                    end
                    waitFrames = waitFrames + 1
                    playerData[payerNum].SortBusy = playerData[payerNum].SortBusy + 0.2
                    playerData[payeeNum].SortBusy = playerData[payeeNum].SortBusy + 0.2
                end
            end
        else
            moneySum = moneySum + tonumber(v.getDescription())
            Wait.frames(function()
                v.destruct()
            end, waitFrames)
            waitFrames = waitFrames + 1
            playerData[payerNum].SortBusy = playerData[payerNum].SortBusy + 0.2
            playerData[payeeNum].SortBusy = playerData[payeeNum].SortBusy + 0.2
        end
    end
    payeeBefore = moneySum

    local objectsList = playerData[payerNum].WalletZone.getObjects()
    local moneySum = 0

    for k, v in ipairs(objectsList) do
        if (tonumber(v.getDescription()) == nil) then
            if (v.getQuantity() != -1) then
                local deckContents = v.getObjects()
                if deckContents != nil then
                    for ke = #deckContents, 1, -1 do
                        if (tonumber(deckContents[ke].description) != nil) then
                            moneySum = moneySum + tonumber(deckContents[ke].description)
                            Wait.frames(function()
                                ---[[
                                v.takeObject({
                                    position          = {0, -5, 0},
                                    rotation          = {0, 0, 0},
                                    callback_function = function(obj) obj.destruct() end,
                                    smooth            = false,
                                    index             = deckContents[ke].index,
                                })
                                --]]
                            end, waitFrames)
                        end
                    end
                    waitFrames = waitFrames + 1
                    playerData[payerNum].SortBusy = playerData[payerNum].SortBusy + 0.2
                    playerData[payeeNum].SortBusy = playerData[payeeNum].SortBusy + 0.2
                end
            end
        else
            moneySum = moneySum + tonumber(v.getDescription())
            Wait.frames(function()
                v.destruct()
            end, waitFrames)
            waitFrames = waitFrames + 1
            playerData[payerNum].SortBusy = playerData[payerNum].SortBusy + 0.2
            playerData[payeeNum].SortBusy = playerData[payeeNum].SortBusy + 0.2
        end
    end

    Wait.frames(function()
        dispenseChange(payerBefore - amount, payerNum)
        dispenseChange(payeeBefore + amount, payeeNum)

        Wait.condition(function()
            Wait.time(function() updateWallets_pay() end, 1)

        end, function()
            for k, v in ipairs(playerData[payerNum].WalletZone.getObjects()) do
                if (v.tag == "Card" or v.tag == "Deck") and not v.resting then
                    return false
                end
            end
            for k, v in ipairs(playerData[payeeNum].WalletZone.getObjects()) do
                if (v.tag == "Card" or v.tag == "Deck") and not v.resting then
                    return false
                end
            end
            return true
        end, 5, function()
            Wait.time(function() updateWallets_pay() end, 1)

        end)
    end, waitFrames)
end


function payBank(payerNum, amount)

    if playerData[payerNum].SortBusy > 0 or not zoneStill(payerNum) then
        broadcastToColor("Make sure nothing in your wallet zone is moving.", playerData[payerNum].Color, {1,1,1})
        return false
    end
    playerData[payerNum].SortBusy = 5

    local payerBefore = countWallet(payerNum)

    if amount > payerBefore then
        broadcastToColor("You can't afford to pay that much.", playerData[payerNum].Color, {1,1,1})
        return false
    end


    local objectsList = playerData[payerNum].WalletZone.getObjects()
    local moneySum = 0

    local waitFrames = 1
    for k, v in ipairs(objectsList) do
        if (tonumber(v.getDescription()) == nil) then
            if (v.getQuantity() != -1) then
                local deckContents = v.getObjects()
                if deckContents != nil then
                    for ke = #deckContents, 1, -1 do
                        if (tonumber(deckContents[ke].description) != nil) then
                            moneySum = moneySum + tonumber(deckContents[ke].description)
                            Wait.frames(function()
                                ---[[
                                v.takeObject({
                                    position          = {0, -5, 0},
                                    rotation          = {0, 0, 0},
                                    callback_function = function(obj) obj.destruct() end,
                                    smooth            = false,
                                    index             = deckContents[ke].index,
                                })
                                --]]
                            end, waitFrames)
                        end
                    end
                    waitFrames = waitFrames + 1
                    playerData[payerNum].SortBusy = playerData[payerNum].SortBusy + 0.2
                end
            end
        else
            moneySum = moneySum + tonumber(v.getDescription())
            Wait.frames(function()
                v.destruct()
            end, waitFrames)
            waitFrames = waitFrames + 1
            playerData[payerNum].SortBusy = playerData[payerNum].SortBusy + 0.2
        end
    end
    Wait.frames(function()
        dispenseChange(payerBefore - amount, payerNum)

        Wait.condition(function()
            Wait.time(function() updateWallets_pay() end, 1)

        end, function()
            for k, v in ipairs(playerData[payerNum].WalletZone.getObjects()) do
                if (v.tag == "Card" or v.tag == "Deck") and not v.resting then
                    return false
                end
            end
            return true
        end, 5, function()
            Wait.time(function() updateWallets_pay() end, 1)

        end)
    end, waitFrames)
    return true
end

function buy(theButton, theClicker)
  local playerNum = getPlayerNum(theButton)
  if playerNum == 0 then
    print('ERROR: Claim: How did you click this?')
    return
  end

  if playerData[playerNum].Color != theClicker and theClicker != "Black" and not Player[theClicker].admin then
    broadcastToColor("This is not yours", theClicker, {1,1,1})
    return
  end

  if playerData[playerNum].SortBusy > 0 or not zoneStill(playerNum) then
      broadcastToColor("Please wait before trying again so soon.", theClicker, {1,1,1})
      return
  end


  for i, v in ipairs(playerData[playerNum].WalletZone.getObjects()) do
      if v.tag == "Card" or v.tag == "Deck" then
          if not v.resting or v.spawning then
              broadcastToColor("Make sure nothing in your wallet zone is moving.", theClicker, {1,1,1})
              return
          end
      end
  end

  local token = playerData[playerNum].Token
  if not token then
      broadcastToColor("Error: Token not found.", theClicker, {1,1,1})
      return
  end

  local currSquare = getSquare(token.getPosition())
  if not currSquare then
      broadcastToColor("Error: Token not found on board.", theClicker, {1,1,1})
      return
  end

  local available = propertyAvailable(currSquare)
  if not available then
      broadcastToColor("Error: Property not found in bank.", theClicker, {1,1,1})
      return
  end

  local amount = propertyPrices[boardPoints[currSquare][2]]

  local success = payBank(playerNum, amount)
    if success then
        takeDeed(currSquare, playerNum)
    end
end


function propertyAvailable(square)
    if not boardPoints[square] or not propertyPrices[boardPoints[square][2]] then
        return false
    end
    for i, v in ipairs(getAllObjects()) do
        if v.tag == "Card" then
            local position = v.getPosition()
            if position.x > 20 and position.x < 27 and position.z > -15 and position.z < 16 then
                if v.getName() == boardPoints[square][2] then
                    return true
                end
            end
        elseif v.tag == "Deck" then
            local position = v.getPosition()
            if position.x > 20 and position.x < 27 and position.z > -15 and position.z < 16 then
                for j, w in ipairs(v.getObjects()) do
                    if w.name == boardPoints[square][2] then
                        return true
                    end
                end
            end
        end
    end
    return false
end


function takeDeed(square, playerNum)
    for i, v in ipairs(getAllObjects()) do
        if v.tag == "Card" then
            local position = v.getPosition()
            if position.x > 20 and position.x < 27 and position.z > -15 and position.z < 16 then
                if v.getName() == boardPoints[square][2] then
                    v.setPositionSmooth(playerData[playerNum].SortPositions[boardPoints[square][2]], false, true)
                    local upRotation = playerData[playerNum].WalletCounter.getRotation()
                    v.setRotationSmooth({
                        upRotation.x,
                        upRotation.y + 180,
                        upRotation.z,
                    })
                    return
                end
            end
        elseif v.tag == "Deck" then
            local position = v.getPosition()
            if position.x > 20 and position.x < 27 and position.z > -15 and position.z < 16 then
                for j, w in ipairs(v.getObjects()) do
                    if w.name == boardPoints[square][2] then
                        v.takeObject({
                            index = w.index,
                            callback_function = function(obj)
                                obj.setPositionSmooth(playerData[playerNum].SortPositions[boardPoints[square][2]], false, true)
                                local upRotation = playerData[playerNum].WalletCounter.getRotation()
                                obj.setRotationSmooth({
                                    upRotation.x,
                                    upRotation.y + 180,
                                    upRotation.z,
                                })
                            end,
                        })
                        return
                    end
                end
            end
        end
    end
end


function dispenseChange(sum, playerNum)
    local counts = valueToChangeCounts(sum)
    local counterRotation = playerData[playerNum].WalletCounter.getRotation()
    local waitFrames = 1
    for i, v in ipairs(counts) do
        for j = 1, v do
            local cardJSON = cardJSONs[chipValues[i]]
            Wait.frames(function()
                spawnObjectJSON({
                    json = cardJSON,
                    position = playerData[playerNum].SortPositions[tostring(chipValues[i])],
                    rotation = counterRotation,
                    callback_function = function() return end,
                })
            end, waitFrames)
            waitFrames = waitFrames + 1
            playerData[playerNum].SortBusy = playerData[playerNum].SortBusy + 0.2
        end
    end
end

function valueToChangeCounts(value)
    local counts = {0, 0, 0, 0, 0, 0, 0}
    for i, v in ipairs(getChangeCounts) do
        value, counts = valueToChangeStep(value, counts, i, v)
    end
    local tradeUpCounts = valueToTradeUpCounts(value)
    for i = 1, #counts do
        counts[i] = counts[i] + tradeUpCounts[i]
    end
    return counts
end

function valueToChangeStep(value, counts, type, number)
    while value > chipValues[type] and number > 0 do
        value = value - chipValues[type]
        counts[type] = counts[type] + 1
        number = number - 1
    end
    return value, counts
end

function valueToTradeUpCounts(value)
    local counts = {0, 0, 0, 0, 0, 0, 0}
    for i = #counts, 1, -1 do
        if value == 0 then
            break
        end
        if getChangeCounts[i] ~= 0  or i == 1 then
            local chipNumber = math.floor(value / chipValues[i])
            value = value - chipValues[i]*chipNumber
            counts[i] = chipNumber
        end
    end
    return counts
end


function sortWallet(theButton, theClicker)
  local playerNum = getPlayerNum(theButton)
  if playerNum == 0 then
    print('ERROR: Claim: How did you click this?')
    return
  end

  if playerData[playerNum].Color != theClicker and theClicker != "Black" and not Player[theClicker].admin then
    broadcastToColor("This is not yours", theClicker, {1,1,1})
    return
  end

  if playerData[playerNum].SortBusy > 0 or not zoneStill(playerNum) then
      broadcastToColor("Please wait before trying again so soon.", theClicker, {1,1,1})
      return
  end


  for i, v in ipairs(playerData[playerNum].WalletZone.getObjects()) do
      if v.tag == "Card" or v.tag == "Deck" then
          if not v.resting or v.spawning then
              broadcastToColor("Make sure nothing in your wallet zone is moving.", theClicker, {1,1,1})
              return
          end
      end
  end


  playerData[playerNum].SortBusy = 5

  local toGroup = {}
  local startedFaceDown = {}
  for i, v in ipairs(playerData[playerNum].WalletZone.getObjects()) do
      if v.tag == "Card" or v.tag == "Deck" then
          table.insert(toGroup, v)
          if v.is_face_down then
              if v.tag == "Card" then
                  if string.len(v.getName()) > 0 then
                      startedFaceDown[v.getName()] = true
                  end
              elseif v.tag == "Deck" then
                  for j, w in ipairs(v.getObjects()) do
                      if string.len(w.name) > 0 then
                          startedFaceDown[v.getName()] = true
                      end
                  end
              end
          end
      end
  end
  local v = nil
  if #toGroup > 1 or (#toGroup == 1 and toGroup[1].tag == "Deck") then
      v = group(toGroup)[1]
  elseif #toGroup == 1 then
      v = toGroup[1]
      local desc = v.getDescription()
      local nickname = v.getName()
      local spawnPosition, spawnRotation = nil, nil
      local upRotation = playerData[playerNum].WalletCounter.getRotation()
      if desc and string.len(desc) > 0 then
          spawnPosition = playerData[playerNum].SortPositions[desc]
          spawnRotation = upRotation
      else
          if nickname and string.len(nickname) > 0 then
              spawnPosition = playerData[playerNum].SortPositions[nickname]
              if startedFaceDown[nickname] then
                  spawnRotation = {
                      upRotation.x,
                      upRotation.y + 180,
                      upRotation.z + 180,
                  }
              else
                  spawnRotation = {
                      upRotation.x,
                      upRotation.y + 180,
                      upRotation.z,
                  }
              end
          else
              spawnPosition = playerData[playerNum].SortPositions.Miscellaneous
              spawnRotation = {
                  upRotation.x,
                  upRotation.y + 180,
                  upRotation.z,
              }
          end
      end
      if not spawnPosition then
          spawnPosition = playerData[playerNum].SortPositions.Miscellaneous
          spawnRotation = {
              upRotation.x,
              upRotation.y + 180,
              upRotation.z,
          }
      end
      v.setPositionSmooth(spawnPosition, false, false)
      v.setRotationSmooth(spawnRotation, false, false)
      return
  elseif #toGroup == 0 then
      return
  end

  Wait.condition(function()

      local cardJSONs = {}
      local positions = {}
      local rotations = {}
      local upRotation = playerData[playerNum].WalletCounter.getRotation()

      --[[
      local deckJSON = v.getJSON()
      local st = string.find(deckJSON, '"ContainedObjects": %[')
      local en = string.find(deckJSON, '%]', st)
      local containedJSON = string.sub(deckJSON, st, en)
      local currentIndex = 1
      while currentIndex do
          local cardSt = string.find(containedJSON, '%s*{%s*"Name": "Card",', currentIndex)
          if cardSt then
              local _, cardEn = string.find(containedJSON, '"GUID": "[%dabcdef]*"%s*}', cardSt)
              local cardJSON = string.sub(containedJSON, cardSt, cardEn)
              table.insert(cardJSONs, cardJSON)
              local spawnPosition = nil
              local spawnRotation = nil
              local upRotation = playerData[playerNum].WalletCounter.getRotation()
              local dSt, dEn, desc = string.find(cardJSON, '"Description": "([%d%a%s&%.]*)",')
              if desc and string.len(desc) > 0 then
                  spawnPosition = playerData[playerNum].SortPositions[desc]
                  spawnRotation = upRotation
              else
                  local nSt, nEn, nickname = string.find(cardJSON, '"Nickname": "([%d%a%s&%.]*)",')
                  if nickname and string.len(nickname) > 0 then
                      spawnPosition = playerData[playerNum].SortPositions[nickname]
                      if startedFaceDown[nickname] then
                          spawnRotation = {
                              upRotation.x,
                              upRotation.y + 180,
                              upRotation.z + 180,
                          }
                      else
                          spawnRotation = {
                              upRotation.x,
                              upRotation.y + 180,
                              upRotation.z,
                          }
                      end
                  else
                      spawnPosition = playerData[playerNum].SortPositions.Miscellaneous
                      spawnRotation = {
                          upRotation.x,
                          upRotation.y + 180,
                          upRotation.z,
                      }
                  end
              end
              if not spawnPosition then
                  spawnPosition = playerData[playerNum].SortPositions.Miscellaneous
                  spawnRotation = {
                      upRotation.x,
                      upRotation.y + 180,
                      upRotation.z,
                  }
              end
              table.insert(positions, spawnPosition)
              table.insert(rotations, spawnRotation)
              currentIndex = cardEn
          else
              currentIndex = nil
          end
      end
      --]]
      for j, w in ipairs(v.getObjects()) do
          local desc = w.description
          if desc == "1" or desc == "5" or desc == "10" or desc == "20" or desc == "50" or desc == "100" or desc == "500" then
              spawnPosition = playerData[playerNum].SortPositions[desc]
              spawnRotation = upRotation
          else
              local nickname = w.name
              if nickname and string.len(nickname) > 0 then
                  spawnPosition = playerData[playerNum].SortPositions[nickname]
                  if startedFaceDown[nickname] then
                      spawnRotation = {
                          upRotation.x,
                          upRotation.y + 180,
                          upRotation.z + 180,
                      }
                  else
                      spawnRotation = {
                          upRotation.x,
                          upRotation.y + 180,
                          upRotation.z,
                      }
                  end
              else
                  spawnPosition = playerData[playerNum].SortPositions.Miscellaneous
                  spawnRotation = {
                      upRotation.x,
                      upRotation.y + 180,
                      upRotation.z,
                  }
              end
          end
          if not spawnPosition then
              spawnPosition = playerData[playerNum].SortPositions.Miscellaneous
              spawnRotation = {
                  upRotation.x,
                  upRotation.y + 180,
                  upRotation.z,
              }
          end
          table.insert(positions, spawnPosition)
          table.insert(rotations, spawnRotation)
      end

      v.setPosition({
          playerData[playerNum].SortPositions.Miscellaneous[1],
          playerData[playerNum].SortPositions.Miscellaneous[2] + 2,
          playerData[playerNum].SortPositions.Miscellaneous[3],
      })
      dispense_callback(v, positions, rotations, playerNum)
  end, function()
      if v.spawning then
          return false
      end
      for i, v in ipairs(playerData[playerNum].WalletZone.getObjects()) do
          if v.tag == "Card" or v.tag == "Deck" then
              if v.spawning then
                  return false
              end
          end
      end
      return true
    end)
end


function dispense_callback(obj, positions, rotations, playerNum)
    local bagPosition = obj.getPosition()
    local containedCount = #obj.getObjects()
    for i = 1, containedCount - 1 do
        Wait.frames(function()
            obj.takeObject({
                index = 0,
                position = bagPosition,
                rotation = rotations[i],
                smooth = false,
                callback_function = function(chip)
                    dispense_chip_callback(chip, positions[i])
                end,
            })
        end, i)
    end
    Wait.frames(function()
        obj.takeObject({
            index = 0,
            position = bagPosition,
            rotation = rotations[containedCount],
            smooth = false,
            callback_function = function(chip)
                dispense_chip_callback(chip, positions[containedCount])
            end,
        })
    end, containedCount - 1)
end


function dispense_chip_callback(chip, position)
    chip.setPositionSmooth(position, false, false)
end



function getPlayerNum(theButton)
  local playerNum = 0
  local ctr = 0
  for k, v in next, playerData do
    ctr = ctr + 1
    if theButton == v.ButtonChip then
        playerNum = ctr
    end
  end
  return playerNum
end
-------------------------------------------------------------------------

-- Counting Player's Wallets --------------------------------------------
function updateWallets()
  for k, v in next, playerData do
    if v.WalletZoneObjectCount != #(v.WalletZone.getObjects()) then
      local objectsList = v.WalletZone.getObjects()
      local moneySum = 0

      for k, v in next, objectsList do
    		if (tonumber(v.getDescription()) == nil) then
    			if (v.getQuantity() != -1) then
    				local deckContents = v.getObjects()
    				if deckContents != nil then
    					for ke, va in next, deckContents do
    						if (tonumber(va.description) != nil) then
    							moneySum = moneySum + tonumber(va.description)
    						end
    					end
    				end
    			end
    		else
    			moneySum = moneySum + tonumber(v.getDescription())
    		end
    	end

    	v.WalletCounter.setValue(moneySum)
      v.WalletZoneObjectCount = #(v.WalletZone.getObjects())
    end
  end
end

function updateWallets_pay()
        for k, v in next, playerData do
          --    if v.WalletZoneObjectCount != #(v.WalletZone.getObjects()) then
      local objectsList = v.WalletZone.getObjects()
      local moneySum = 0

      for k, v in next, objectsList do
    		if (tonumber(v.getDescription()) == nil) then
    			if (v.getQuantity() != -1) then
    				local deckContents = v.getObjects()
    				if deckContents != nil then
    					for ke, va in next, deckContents do
    						if (tonumber(va.description) != nil) then
    							moneySum = moneySum + tonumber(va.description)
    						end
    					end
    				end
    			end
    		else
    			moneySum = moneySum + tonumber(v.getDescription())
    		end
    	end

    	v.WalletCounter.setValue(moneySum)
      v.WalletZoneObjectCount = #(v.WalletZone.getObjects())
      --    end
        end
end
-------------------------------------------------------------------------

-- Retrieving Player's Dice ---------------------------------------------
function retrieveDice()
  for k, v in next, playerData do
    if v.Die1 == nil or v.Die2 == nil then

    else

      if v.Die1Resting == true then
        if v.Die1.resting != true then
          v.Die1Resting = false
          if v.Color == turnData.Color then
              turnData.HasRolled1 = false
          end
        end
      else
        if v.Die1.resting == true then
          v.Die1.setPositionSmooth(v.Die1Position)
          v.Die1Resting = true
          if v.Color == turnData.Color then
              turnData.HasRolled1 = true
          end
        end
      end

      if v.Die2Resting == true then
        if v.Die2.resting != true then
          v.Die2Resting = false
          if v.Color == turnData.Color then
              turnData.HasRolled2 = false
          end
        end
      else
        if v.Die2.resting == true then
          v.Die2.setPositionSmooth(v.Die2Position)
          v.Die2Resting = true
          if v.Color == turnData.Color then
              turnData.HasRolled2 = true
          end
        end
      end

    end
  end
end
-------------------------------------------------------------------------

-- Moving Token By Rolled Amount ----------------------------------------
function getSquare(position)  --Gives INDEX according to coords
	-- this is just a mess so I rewrote it and replaced it with getSquare 2

  local X = position.x
  local Z = position.z

  if X > 12.10 and X < 17 and Z < 17 and Z > -17 then
    --Token is on Right
    if Z >  12.20 then return 30 end
    if Z >   9.45 then return 31 end
    if Z >   6.70 then return 32 end
    if Z >   4.00 then return 33 end
    if Z >   1.25 then return 34 end
    if Z >  -1.45 then return 35 end
    if Z >  -4.15 then return 36 end
    if Z >  -6.90 then return 37 end
    if Z >  -9.55 then return 38 end
    if Z > -12.25 then return 39 end
    return 0
  end
  if X < -12.25 and X > -17 and Z < 17 and Z > -17 then
	if Z < -12.25 then
		--if X > -15.5 and Z > -15.5 then  -- OLD way :if Position Given is inside the joil
		local JailTile = getObjectFromGUID("fd4e1e")
		local LocalPosition = JailTile.positionToLocal(position)
		log(LocalPosition["x"])
		if (LocalPosition["x"] <=0.43) and(LocalPosition["z"]<= 0.43) then
			return 40 --jail
		else
			-- log("10")
		      return 10 --visiting
		end
	end
    if Z <  -9.55 then return 11 end
    if Z <  -6.90 then return 12 end
    if Z <  -4.15 then return 13 end
    if Z <  -1.45 then return 14 end
    if Z <   1.25 then return 15 end
    if Z <   4.00 then return 16 end
    if Z <   6.70 then return 17 end
    if Z <   9.45 then return 18 end
    if Z <  12.20 then return 19 end
    return 20
  end
  if Z > 12.20 and Z < 17 and X < 17 and X > -17 then
    --Token is on Top
    if X < -9.45 then return 21 end
    if X < -6.58 then return 22 end
    if X < -4.10 then return 23 end
    if X < -1.40 then return 24 end
    if X <  1.30 then return 25 end
    if X <  4.10 then return 26 end
    if X <  6.80 then return 27 end
    if X <  9.50 then return 28 end
    return 29
  end
  if Z < -12.25 and Z > -17 and X < 17 and X > -17 then
    --Token is on Bottom
    if X >  9.35 then return 1 end
    if X >  6.80 then return 2 end
    if X >  4.10 then return 3 end
    if X >  1.40 then return 4 end
    if X > -1.30 then return 5 end
    if X > -4.05 then return 6 end
    if X > -6.75 then return 7 end
    if X > -9.50 then return 8 end
    return 9
  end

  --Token is not on the board.
  return 0
end


function getSquare2(position) --returns Index of tile of coordinates

	local hitlist = Physics.cast({  -- casts a line that detects objects in the same X Z coords
		origin       = {position["x"], position["y"]+10, position["z"]},
		direction    = {0,-1,0},
		type         = 1,
		max_distance = 20,
		debug        = false,
	})

	local CorIndex

	for i,v in ipairs(hitlist) do  --for every object detected in the  coords

		local hitGUID = v["hit_object"].guid  -- get GUID of hit objects
		for ii,vv in ipairs(boardPoints) do  --if that Objects GUID ([3]) is in the tile list
			if hitGUID == vv[3] then

				CorIndex = ii  --keep its index in boardPoints to return

			end
		end
	end


	if boardPoints[CorIndex][3] == "fd4e1e"  then--if it is in prison

		local JailTile = getObjectFromGUID("fd4e1e")
		local LocalPosition = JailTile.positionToLocal(position)  -- get the position of the coords on the prison tile

		if (LocalPosition["x"] <=0.43) and(LocalPosition["z"]<= 0.43) then
			log"jail"
			return 40 --jail
		else
			log"visiting"
			return 10
		end
	end
	if CorIndex == 41 then return 00 end  --strating tile
	return CorIndex

end


boardPoints = {nil}
function initializeBoardPoints(save_state)
  boardPoints[01] = {{ 10.8, 2.5, -15.4}, 'Mediterranean Avenue', "f4dc4f"}
  boardPoints[02] = {{  8.1, 2.5, -15.4}, 'Community Chest', "e8eb08"}
  boardPoints[03] = {{  5.5, 2.5, -15.4}, 'Baltic Avenue', "54a8bc"}
  boardPoints[04] = {{  2.7, 2.5, -14.1}, 'Income Tax: $200', "301c14"}
  boardPoints[05] = {{  0  , 2.5, -15.4}, 'Reading Railroad', "b50b41"}
  boardPoints[06] = {{ -2.7, 2.5, -15.4}, 'Oriental Avenue', "372199"}
  boardPoints[07] = {{ -5.4, 2.5, -15.4}, 'Chance', "383b15"}
  boardPoints[08] = {{ -8  , 2.5, -15.4}, 'Vermont Avenue', "eca9e1"}
  boardPoints[09] = {{-10.9, 2.5, -15.4}, 'Connecticut Avenue', "8304f4"}
  boardPoints[10] = {{-15.9, 2.5, -15.9}, 'Just Visiting', "fd4e1e"}
  boardPoints[11] = {{-15.4, 2.5, -10.9}, 'St. Charles Place', "4ec6d8"}
  boardPoints[12] = {{-15.4, 2.5,  -8.2}, 'Electric Company', "1035d2"}
  boardPoints[13] = {{-15.4, 2.5,  -5.5}, 'States Avenue', "28bf46"}
  boardPoints[14] = {{-15.4, 2.5,  -2.7}, 'Virginia Avenue', "d0ec7f"}
  boardPoints[15] = {{-15.4, 2.5,   0  }, 'Pennsylvania Railroad', "d86d9e"}
  boardPoints[16] = {{-15.4, 2.5,   2.7}, 'St. James Place', "5054d3"}
  boardPoints[17] = {{-15.4, 2.5,   5.4}, 'Community Chest', "3aaefe"}
  boardPoints[18] = {{-15.4, 2.5,   8  }, 'Tennessee Avenue', "830d72"}
  boardPoints[19] = {{-15.4, 2.5,  10.9}, 'New York Avenue', "f168cb"}
  boardPoints[20] = {{-14.5, 2.5,  14.5}, 'Free Parking', "d98755"}
  boardPoints[21] = {{-10.9, 2.5,  15.4}, 'Kentucky Avenue', "44470d"}
  boardPoints[22] = {{ -8.1, 2.5,  15.4}, 'Chance', "5a9b1b"}
  boardPoints[23] = {{ -5.5, 2.5,  15.4}, 'Indiana Avenue', "954e29"}
  boardPoints[24] = {{ -2.7, 2.5,  15.4}, 'Illinois Avenue', "d561ca"}
  boardPoints[25] = {{  0  , 2.5,  15.4}, 'B&O Railroad', "08d1f6"}
  boardPoints[26] = {{  2.7, 2.5,  15.4}, 'Atlantic Avenue', "74f444"}
  boardPoints[27] = {{  5.5, 2.5,  15.4}, 'Ventnor Avenue', "cbf6e0"}
  boardPoints[28] = {{  8  , 2.5,  15.4}, 'Water Works', "1a0ed2"}
  boardPoints[29] = {{ 10.9, 2.5,  15.4}, 'Marvin Gardens', "f09569"}
  boardPoints[30] = {{ 14.5, 2.5,  14.5}, 'Go To Jail', "568d86"}
  boardPoints[31] = {{ 15.4, 2.5,  10.9}, 'Pacific Avenue', "31ef48"}
  boardPoints[32] = {{ 15.4, 2.5,   8  }, 'North Carolina Avenue', "41917f"}
  boardPoints[33] = {{ 15.4, 2.5,   5.4}, 'Community Chest', "0be989"}
  boardPoints[34] = {{ 15.4, 2.5,   2.7}, 'Pennsylvania Avenue', "71515f"}
  boardPoints[35] = {{ 15.4, 2.5,   0  }, 'Short Line', "34c38f"}
  boardPoints[36] = {{ 15.4, 2.5,  -2.7}, 'Chance', "774fb1"}
  boardPoints[37] = {{ 15.4, 2.5,  -5.5}, 'Park Place', "7a9e04"}
  boardPoints[38] = {{ 15.4, 2.5,  -8  }, 'Luxury Tax: $100', "1e482e"}
  boardPoints[39] = {{ 15.4, 2.5, -10.9}, 'Boardwalk', "599ed2"}
  boardPoints[40] = {{-13.8, 2.5, -13.8}, 'Jail', "fd4e1e"}
  boardPoints[41] = {{0,0,0}, 'Start', "ebc8ff"}
end

function moveToken(theButton, theClicker)
  local playerNum = getPlayerNum(theButton)
  if playerNum == 0 then
    print('ERROR: Move: How did you click this?')
    return
  end

  if playerData[playerNum].Color != theClicker and theClicker != "Black" then
    broadcastToColor("This is not yours", theClicker, {1,1,1})
    return
  end

  if playerData[playerNum].Token == nil then
    broadcastToColor("You have no token to move", theClicker, {1,1,1})
    return
  end

    if not playerData[playerNum].Token.resting then
      broadcastToColor("Make sure your token isn't moving.", theClicker, {1,1,1})
      return
    end

  local printColor = stringColorToRGB( playerData[playerNum].Color )
  local currSquare = getSquare2(playerData[playerNum].Token.getPosition())
  log(currSquare)

  -- log"---"
  -- log(getSquare(playerData[playerNum].Token.getPosition()))
  -- log"---"
  --
  -- log(getSquare2(playerData[playerNum].Token.getPosition()))
  -- log"---"

  turnData.HasRolled1 = false
  turnData.HasRolled2 = false
  turnData.HasMoved = true
  --[[
  if playerData[playerNum].Die1.getValue() == playerData[playerNum].Die2.getValue() then
    if turnData.firstDoubles == false then
      turnData.HasMoved = false
      turnData.firstDoubles = true
    else
      if turnData.secondDoubles == false then
        turnData.HasMoved = false
        turnData.secondDoubles = true
      else
        currSquare = 30 - (playerData[playerNum].Die1.getValue() * 2)
      end
    end
  end
  --]]

  if currSquare == 40 then currSquare = 10 end

  currSquare = currSquare + playerData[playerNum].Die1.getValue() + playerData[playerNum].Die2.getValue()

  if currSquare > 39 then
    currSquare = currSquare - 40
    --[[
    if currSquare != 0 then
      broadcastToAll(playerData[playerNum].Color .. " passed GO", printColor)
    else
      broadcastToAll("GO", printColor)
    end
    --]]
  end

  if currSquare == 30 then currSquare = 40 end

  if currSquare == 0 then
    playerData[playerNum].Token.setPositionSmooth(playerData[playerNum].TokenInitialPosition)
  else
    playerData[playerNum].Token.setPositionSmooth(boardPoints[currSquare][1])
    --broadcastToAll(boardPoints[currSquare][2], printColor)
  end
end

function onPlayerTurnStart(player_color_start, player_color_previous)
  nextTurn({player_color_start})
end

turnData = {nil}
function nextTurn(theData)
  turnData = {
    Color=theData[1]
    ,HasRolled1 = false
    ,HasRolled2 = false
    ,HasMoved = false
    ,firstDoubles = false
    ,secondDoubles = false
  }
end
-------------------------------------------------------------------------

function splitString(input)
    local outputs = {}
    --for output in input:gmatch("%w+") do
    for output in input:gmatch("[^%s]+") do
        table.insert(outputs, output)
    end
    return outputs
end

function debug(y)  -- to make debug tool make a object with the following  code in it

	-- function onDrop(player_color)
	-- 	Global.call("debug", self.getPosition())
	-- end

	D= getSquare2(y)
	log(D)
	log(boardPoints[D])
end

function rollDice(theButton, theClicker)

	log(theButton)

	local PlayerNo
	--
	for i,v in ipairs(playerData) do
		if v["Color"] == theClicker then
			PlayerNo = i
		end
	end

	playerData[PlayerNo]["Die1"].roll()
	playerData[PlayerNo]["Die2"].roll()
end
